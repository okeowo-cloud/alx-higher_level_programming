The ``0-add_integer`` module
============================

Using ``add_integer``
-----------------------

	>>> add_integer = __import__('0-add_integer').add_integer

Test Scenarios:

case 1:
with two valid integers returns ok.
	>>> add_integer(1, 2)
	3

case 2:
with two valid non-positive integers, returns ok.
	>>> add_integer(-5, -10)
	-15

case 3:
with one valid positive integer and one valid non-positive integer, returns ok.
	>>> add_integer(10, -2)
	8

case 4:
with two big valid integers, returns ok.
	>>> add_integer(12983448, 56237934)
	69221382

case 5: 
with two big valid negative integers, return ok.
	>>> add_integer(-12983448, -56237934)
	-69221382

case 6: 
with one integer and one float, return ok.
	>>> add_integer(23, 12.67)
	35

case 7: 
with one float and one integer, return ok.
	>>> add_integer(35.21, 12)
	47

case 8:
with two float, return ok
	>>> add_integer(12.12, 13.91)
	25

case 9:
with only one integer, since b is optional, return ok.
	>>> add_integer(2)
	100

case 9: 
with one integer and a non-number, return ok.
	>>> add_integer(12, "lekan")
	Traceback (most recent call last):
	TypeError: b must be an integer

case 10:
with one non-number and a float, return ok.
	>>> add_integer("dipo", 17.9)
	Traceback (most recent call last):
	TypeError: a must be an integer

case 11:
with two non-number, return ok.
	>>> add_integer("dipo", "lekan")
	Traceback (most recent call last):
	TypeError: a must be an integer

case 12:
with one None type and an integer, return ok.
	>>> add_integer(None, 23)
	Traceback (most recent call last):
	TypeError: a must be an integer

case 13:
with one float and a None type, return ok.
	>>> add_integer(0.23, None)
	Traceback (most recent call last):
	TypeError: b must be an integer

case 14:
with just one argument which is None tyoe, return ok.
	>>> add_integer(None)
	Traceback (most recent call last):
	TypeError: a must be an integer

case 15:
with just one argument which is a non-number, return ok.
	>>> add_integer("tunde")
	Traceback (most recent call last):
	TypeError: a must be an integer

case 16:
with infinity, return ok.
	>>> add_integer(float('inf'))
	Traceback (most recent call last):
	OverflowError: cannot convert float infinity to integer
